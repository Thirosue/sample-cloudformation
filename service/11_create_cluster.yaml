AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "General Configuration"
        Parameters:
          - ServiceName
          - PublicDomain
          - LocalDomain
      -
        Label:
          default: "NetWork Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - PublicSecurityGroupId
          - InternalSecurityGroupId
      -
        Label:
          default: "Front AutoScale Configuration"
        Parameters:
          - FrontServiceScaleEvaluationPeriods
          - FrontServiceCpuScaleOutThreshold
          - FrontServiceCpuScaleInThreshold
          - FrontTaskMinContainerCount
          - FrontTaskMaxContainerCount
      -
        Label:
          default: "API AutoScale Configuration"
        Parameters:
          - APIServiceScaleEvaluationPeriods
          - APIServiceCpuScaleOutThreshold
          - APIServiceCpuScaleInThreshold
          - APITaskMinContainerCount
          - APITaskMaxContainerCount
Parameters:
  ServiceName:
    Description: "input your ServiceName."
    Type: String
    Default: "sample-app"

  PublicDomain:
    Description: "input your Public Domain."
    Type: String
    Default: "sample.com"

  LocalDomain:
    Description: "input your Local Domain."
    Type: String
    Default: "sample.local"

# Network
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.

  PublicSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select a Service Secutiry Group.

  InternalSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select a Internal Secutiry Group.

# Front Scaling params
  FrontServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2
 
  FrontServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
 
  FrontServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
 
  FrontTaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one
 
  FrontTaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 2
    MinValue: 1
    ConstraintDescription: Value must be at least one

# API Scaling params
  APIServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2
 
  APIServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
 
  APIServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
 
  APITaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one
 
  APITaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one

Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-east-2:
      AccountId: 033677994240
    us-west-1:
      AccountId: 027434742980
    us-west-2:
      AccountId: '797873946194'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
Resources:         
###############################################################
#  Common Settings
###############################################################

# ------------------------------------------------------------#
#  CloudWatchLog Group (Container Logs)
# ------------------------------------------------------------#         
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

# ------------------------------------------------------------#
#  Local DNS NameSpace (Cloud Map)
# ------------------------------------------------------------#         
  LocalDNS:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Description: "API Container DB Setting"
      Vpc: !Ref VpcId
      Name: !Ref LocalDomain

# ------------------------------------------------------------#
#  ECS Cluster
# ------------------------------------------------------------#         
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ServiceName}-cluster"

###############################################################
#  Front Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  FrontContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-front

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  FrontTaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-front"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: front
        Image: mirrored1976/sample-vue-front
        PortMappings:
        - ContainerPort: 80
        Environment:
          - 
            Name: "API_HOST"
            Value: !Sub "api.${LocalDomain}"
          - 
            Name: "API_PORT"
            Value: 18081
        Command:
          - "/bin/ash"
          - "-c"
          - "envsubst '$$API_HOST $$API_PORT' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: front

# ------------------------------------------------------------#
#  S3 (ALB Log Bucket)
# ------------------------------------------------------------#
  LBLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ServiceName}-accesslog"
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
        - Id: GlacierRule
          Prefix: glacier
          Status: Enabled
          ExpirationInDays: '365'
          Transitions:
            - TransitionInDays: '30'
              StorageClass: Glacier

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LBLogBucket
      PolicyDocument:
        Id: "Allow-Put-ELB-logs"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Stmt1429136633762"
            Action:
              - "s3:PutObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${LBLogBucket}/AWSLogs/${AWS::AccountId}/*"
            Principal:
              AWS: !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId] 

# ------------------------------------------------------------#
#  Target Group
# ------------------------------------------------------------#
  FrontServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VpcId
      Name: !Sub "${ServiceName}-front-target-group"
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: "/admin/swagger-ui.html"
      HealthCheckTimeoutSeconds: 30
      Matcher:
        HttpCode: "200-399"
      Tags:
        - 
          Key: "Name"
          Value: !Sub "${ServiceName}-front-tg"
 
# ------------------------------------------------------------#
#  Internet ALB
# ------------------------------------------------------------#
  FrontServiceALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ServiceName}-loadbalancer"
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 60
        #### Enable Production  
        #- Key: "access_logs.s3.enabled"
        #  Value: true
        #- Key: "access_logs.s3.bucket"
        #  Value: !Sub "${ServiceName}-accesslog"
      SecurityGroups:
        -
          !Ref PublicSecurityGroupId
      Subnets: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub "${ServiceName}-lb"

  FrontServiceListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontServiceTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontServiceALB
      Port: 80
      Protocol: HTTP

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#
  FrontService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        -
          TargetGroupArn: !Ref FrontServiceTargetGroup
          ContainerPort: 80
          ContainerName: !Sub "front"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref InternalSecurityGroupId
          Subnets: !Ref SubnetId
      ServiceName: !Sub "${ServiceName}-front-service"
      TaskDefinition: !Ref FrontTaskdefinition
    DependsOn: 
      - FrontServiceListener

# ------------------------------------------------------------#
#  Auto Scaling Service
# ------------------------------------------------------------# 
  FrontServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref FrontTaskMinContainerCount
      MaxCapacity: !Ref FrontTaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsDefaultServiceName}
        - EcsClusterName: !Ref ECSCluster
          EcsDefaultServiceName: !Sub "${ServiceName}-front-service"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-AutoScaleRolePolicy"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - FrontService

  FrontServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-front-service-ScaleOutPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref FrontServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
    DependsOn:
      - FrontServiceScalingTarget
 
  FrontServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-front-service-ScaleInPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref FrontServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
    DependsOn:
      - FrontServiceScalingTarget

  FrontServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-front-service-ScaleOutAlarm"
      AlarmDescription: Alarm to add capacity if CPU is high
      # TODO Chatwork
      #AlarmActions:
      #  - Ref: "logical name of an AWS::SNS::Topic resource"
      EvaluationPeriods: !Ref FrontServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref FrontServiceCpuScaleOutThreshold
      Period: 60
      AlarmActions:
        - !Ref FrontServiceScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !Sub "${ServiceName}-front-service"
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - FrontService
      - FrontServiceScaleOutPolicy

  FrontServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-front-service-ScaleInAlarm"
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      # TODO Chatwork
      #AlarmActions:
      #  - Ref: "logical name of an AWS::SNS::Topic resource"
      EvaluationPeriods: !Ref FrontServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref FrontServiceCpuScaleInThreshold
      Period: 300
      AlarmActions:
        - !Ref FrontServiceScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !Sub "${ServiceName}-front-service"
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - FrontService
      - FrontServiceScaleInPolicy

###############################################################
#  API Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  APIContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-api

# ------------------------------------------------------------#
#  API Sevice Discovery (Cloud Map)
# ------------------------------------------------------------#         
  APIDNSServive:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      Name: api
      Description: API Service Service Discovery Settings 
      DnsConfig: 
        DnsRecords: 
          - 
            Type: A
            TTL: 10
        NamespaceId: !Ref LocalDNS
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig: 
        FailureThreshold: 3

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  APITaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-api"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: api
        Image: mirrored1976/sample-api
        PortMappings:
        - ContainerPort: 18081
        Environment:
          - 
            Name: "SPRING_DATASOURCE_URL"
            Value: !Sub "jdbc:mysql://db.${LocalDomain}:3306/sample?useSSL=false&characterEncoding=UTF-8"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: api

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#
  APIService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref InternalSecurityGroupId
          Subnets: !Ref SubnetId
      ServiceName: !Sub "${ServiceName}-api-service"
      TaskDefinition: !Ref APITaskdefinition
      ServiceRegistries: 
        - RegistryArn: !GetAtt APIDNSServive.Arn

# ------------------------------------------------------------#
#  Auto Scaling Service
# ------------------------------------------------------------# 
  APIServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref APITaskMinContainerCount
      MaxCapacity: !Ref APITaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsDefaultServiceName}
        - EcsClusterName: !Ref ECSCluster
          EcsDefaultServiceName: !Sub "${ServiceName}-api-service"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-AutoScaleRolePolicy"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - APIService

  APIServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-api-service-ScaleOutPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref APIServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
    DependsOn:
      - APIServiceScalingTarget
 
  APIServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-api-service-ScaleInPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref APIServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
    DependsOn:
      - APIServiceScalingTarget

  APIServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-api-service-ScaleOutAlarm"
      AlarmDescription: Alarm to add capacity if CPU is high
      # TODO Chatwork
      #AlarmActions:
      #  - Ref: "logical name of an AWS::SNS::Topic resource"
      EvaluationPeriods: !Ref APIServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref APIServiceCpuScaleOutThreshold
      Period: 60
      AlarmActions:
        - !Ref APIServiceScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !Sub "${ServiceName}-api-service"
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - APIService
      - APIServiceScaleOutPolicy

  APIServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ServiceName}-api-service-ScaleInAlarm"
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      # TODO Chatwork
      #AlarmActions:
      #  - Ref: "logical name of an AWS::SNS::Topic resource"
      EvaluationPeriods: !Ref APIServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref APIServiceCpuScaleInThreshold
      Period: 300
      AlarmActions:
        - !Ref APIServiceScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !Sub "${ServiceName}-api-service"
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - APIService
      - APIServiceScaleInPolicy

###############################################################
#  DB Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  DBContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-db

# ------------------------------------------------------------#
#  DB Sevice Discovery (Cloud Map)
# ------------------------------------------------------------#         
  DBDNSServive:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      Name: db
      Description: DB Service Service Discovery Settings 
      DnsConfig: 
        DnsRecords: 
          - 
            Type: A
            TTL: 10
        NamespaceId: !Ref LocalDNS
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig: 
        FailureThreshold: 3

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  DBTaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-db"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: db
        Image: mirrored1976/sample-db
        PortMappings:
        - ContainerPort: 3306
        Environment:
          - 
            Name: "MYSQL_DATABASE"
            Value: sample
          - 
            Name: "MYSQL_ROOT_USER"
            Value: root
          - 
            Name: "MYSQL_ROOT_PASSWORD"
            Value: passw0rd
          - 
            Name: "TZ"
            Value: Japan
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: db

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#
  DBService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref InternalSecurityGroupId
          Subnets: !Ref SubnetId
      ServiceName: !Sub "${ServiceName}-db-service"
      TaskDefinition: !Ref DBTaskdefinition
      ServiceRegistries: 
        - RegistryArn: !GetAtt DBDNSServive.Arn
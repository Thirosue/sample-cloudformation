AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "General Configuration"
        Parameters:
          - ServiceName
          - PublicDomain
          - LocalDomain
      -
        Label:
          default: "NetWork Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - PublicSecurityGroupId
          - InternalSecurityGroupId
Parameters:
  ServiceName:
    Description: "input your ServiceName."
    Type: String
    Default: "sample-app"
  PublicDomain:
    Description: "input your Public Domain."
    Type: String
    Default: "sample.com"
  LocalDomain:
    Description: "input your Local Domain."
    Type: String
    Default: "sample.local"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  PublicSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select a Service Secutiry Group.
  InternalSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select a Internal Secutiry Group.
Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-east-2:
      AccountId: 033677994240
    us-west-1:
      AccountId: 027434742980
    us-west-2:
      AccountId: '797873946194'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
Resources:         
###############################################################
#  Common Settings
###############################################################

# ------------------------------------------------------------#
#  CloudWatchLog Group (Container Logs)
# ------------------------------------------------------------#         
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
# ------------------------------------------------------------#
#  ECS Cluster
# ------------------------------------------------------------#         
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ServiceName}-cluster"

###############################################################
#  Front Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  FrontContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-front

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  FrontTaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-front"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: front
        Image: mirrored1976/sample-vue-front
        PortMappings:
        - ContainerPort: 80
        Environment:
          - 
            Name: "API_HOST"
            Value: !Sub "api.${LocalDomain}"
          - 
            Name: "API_PORT"
            Value: 18081
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: front

# ------------------------------------------------------------#
#  S3 (ALB Log Bucket)
# ------------------------------------------------------------#
  LBLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ServiceName}-accesslog"
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
        - Id: GlacierRule
          Prefix: glacier
          Status: Enabled
          ExpirationInDays: '365'
          Transitions:
            - TransitionInDays: '30'
              StorageClass: Glacier

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LBLogBucket
      PolicyDocument:
        Id: "Allow-Put-ELB-logs"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Stmt1429136633762"
            Action:
              - "s3:PutObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${LBLogBucket}/AWSLogs/${AWS::AccountId}/*"
            Principal:
              AWS: !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId] 

# ------------------------------------------------------------#
#  Target Group
# ------------------------------------------------------------#
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VpcId
      Name: !Sub "${ServiceName}-front-target-group"
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: "/admin/swagger-ui.html"
      HealthCheckTimeoutSeconds: 30
      Matcher:
        HttpCode: "200-399"
      Tags:
        - 
          Key: "Name"
          Value: !Sub "${ServiceName}-front-tg"
 
# ------------------------------------------------------------#
#  Internet ALB
# ------------------------------------------------------------#
  InternetALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ServiceName}-loadbalancer"
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 60
        - Key: "access_logs.s3.enabled"
          Value: true
        - Key: "access_logs.s3.bucket"
          Value: !Sub "${ServiceName}-accesslog"
      SecurityGroups:
        -
          !Ref PublicSecurityGroupId
      Subnets: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub "${ServiceName}-lb"

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref InternetALB
      Port: 80
      Protocol: HTTP

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#

###############################################################
#  API Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  APIContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-api

# ------------------------------------------------------------#
#  Cloud Map (Service Discovery)
# ------------------------------------------------------------#         
  APIDNS:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Description: "API Container DNS Setting"
      Vpc: !Ref VpcId
      Name: !Sub "api.${LocalDomain}"

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  APITaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-api"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: api
        Image: mirrored1976/sample-api
        PortMappings:
        - ContainerPort: 18081
        Environment:
          - 
            Name: "SPRING_DATASOURCE_URL"
            Value: !Sub "jdbc:mysql://db.${LocalDomain}:3306/sample?useSSL=false&characterEncoding=UTF-8"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: api

###############################################################
#  DB Service Settings
###############################################################

# ------------------------------------------------------------#
#  Repository Settings (ECR)
# ------------------------------------------------------------#         
  APIContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-db

# ------------------------------------------------------------#
#  Cloud Map (Service Discovery)
# ------------------------------------------------------------#         
  DBDNS:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Description: "API Container DB Setting"
      Vpc: !Ref VpcId
      Name: !Sub "db.${LocalDomain}"

# ------------------------------------------------------------#
#  ECS Task Definition
# ------------------------------------------------------------#         
  DBTaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ServiceName}-db"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-ECSTaskExecutionRolePolicy"
      ContainerDefinitions:
      - Name: db
        Image: mirrored1976/sample-db
        PortMappings:
        - ContainerPort: 3306
        Environment:
          - 
            Name: "MYSQL_DATABASE"
            Value: sample
          - 
            Name: "MYSQL_ROOT_USER"
            Value: root
          - 
            Name: "MYSQL_ROOT_PASSWORD"
            Value: passw0rd
          - 
            Name: "TZ"
            Value: Japan
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: db
